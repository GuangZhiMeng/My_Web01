name: Deploy to Aliyun ECS

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build application
      run: npm run build
      
    - name: Deploy to Aliyun ECS
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.ALIYUN_HOST }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        password: ${{ secrets.ALIYUN_PASSWORD }}
        port: ${{ secrets.ALIYUN_PORT }}
        script: |
          # 更新系统
          sudo yum update -y
          
          # 安装Docker（如果未安装）
          if ! command -v docker &> /dev/null; then
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo systemctl start docker
            sudo systemctl enable docker
          fi
          
          # 安装Docker Compose（如果未安装）
          if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          
          # 创建项目目录
          mkdir -p /root/copywriting-generator
          cd /root/copywriting-generator
          
          # 停止旧容器
          docker-compose down 2>/dev/null || true
          
          # 清理旧镜像
          docker rmi copywriting-generator_web 2>/dev/null || true
          
          # 创建必要的文件
          cat > docker-compose.yml << 'EOF'
          version: '3.8'
          services:
            web:
              build: .
              ports:
                - "3000:3000"
              environment:
                - NODE_ENV=production
              restart: unless-stopped
              container_name: copywriting-generator
          EOF
          
          cat > Dockerfile << 'EOF'
          FROM node:18-alpine AS base
          FROM base AS deps
          RUN apk add --no-cache libc6-compat
          WORKDIR /app
          COPY package.json package-lock.json* ./
          RUN npm ci --only=production
          FROM base AS builder
          WORKDIR /app
          COPY --from=deps /app/node_modules ./node_modules
          COPY . .
          RUN npm run build
          FROM base AS runner
          WORKDIR /app
          ENV NODE_ENV production
          RUN addgroup --system --gid 1001 nodejs
          RUN adduser --system --uid 1001 nextjs
          COPY --from=builder /app/public ./public
          RUN mkdir .next
          RUN chown nextjs:nodejs .next
          COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
          COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
          USER nextjs
          EXPOSE 3000
          ENV PORT 3000
          ENV HOSTNAME "0.0.0.0"
          CMD ["node", "server.js"]
          EOF
          
          # 复制项目文件
          rm -rf app components hooks lib public styles
          rm -f package.json package-lock.json next.config.mjs tsconfig.json
          
    - name: Copy files to server
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.ALIYUN_HOST }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        password: ${{ secrets.ALIYUN_PASSWORD }}
        port: ${{ secrets.ALIYUN_PORT }}
        source: "app,components,hooks,lib,public,styles,package.json,package-lock.json,next.config.mjs,tsconfig.json"
        target: "/root/copywriting-generator"
        
    - name: Build and start containers
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.ALIYUN_HOST }}
        username: ${{ secrets.ALIYUN_USERNAME }}
        password: ${{ secrets.ALIYUN_PASSWORD }}
        port: ${{ secrets.ALIYUN_PORT }}
        script: |
          cd /root/copywriting-generator
          
          # 构建并启动容器
          docker-compose build --no-cache
          docker-compose up -d
          
          # 等待服务启动
          sleep 10
          
          # 检查服务状态
          docker-compose ps
          
          # 安装Nginx（如果未安装）
          if ! command -v nginx &> /dev/null; then
            sudo yum install -y nginx
            sudo systemctl start nginx
            sudo systemctl enable nginx
          fi
          
          # 配置Nginx
          sudo tee /etc/nginx/conf.d/copywriting-generator.conf > /dev/null << 'EOF'
          server {
              listen 80;
              server_name gzmabc.xyz www.gzmabc.xyz;
              
              location / {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_cache_bypass $http_upgrade;
              }
          }
          EOF
          
          # 重启Nginx
          sudo nginx -t && sudo systemctl reload nginx
          
          # 配置防火墙
          sudo firewall-cmd --permanent --add-port=80/tcp
          sudo firewall-cmd --permanent --add-port=443/tcp
          sudo firewall-cmd --reload
          
          echo "🚀 部署完成！"
          echo "访问地址: http://gzmabc.xyz"
